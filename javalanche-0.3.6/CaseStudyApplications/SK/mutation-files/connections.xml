<de.unisb.cs.st.javalanche.coverage.distance.ConnectionData>
  <connections>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getUnsolvedPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>propagateConstraints</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>solve</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeers</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPossibleValues</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPossibleValues</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>length</methodName>
        <desc>(Ljava/util/List;)I</desc>
      </start>
      <end>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>length</methodName>
        <desc>(Ljava/util/List;)I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getSolvedValue</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getSolvedValue</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>setValue</methodName>
        <desc>(I)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>setValue</methodName>
        <desc>(I)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>setSolvedBoxesInPuzzle</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>column</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>solve</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Lsrc/sudoku/Puzzle;Lsrc/sudoku/Box;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>column</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getSolvedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getSolvedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getSolvedValue</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUnsolvedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUnsolvedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>dimension</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUnsolvedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Lsrc/sudoku/Puzzle;Lsrc/sudoku/Box;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getSolvedValue</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>setRowAndColumn</methodName>
        <desc>(II)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>setRowAndColumn</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getUnsolvedPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>row</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>validateInputString</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>isEmpty</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersPerUnit</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>length</methodName>
        <desc>(Ljava/util/List;)I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPossibleValues</methodName>
        <desc>(II)[Ljava/lang/Integer;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPossibleValues</methodName>
        <desc>(II)[Ljava/lang/Integer;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>row</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>addUnique</methodName>
        <desc>(Ljava/util/ArrayList;Ljava/util/List;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>addUnique</methodName>
        <desc>(Ljava/util/ArrayList;Ljava/util/List;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>row</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>checkForDuplicates</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>dimension</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersPerUnit</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>copyPossibleValues</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>copyPossibleValues</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>column</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>anyPeerHasDuplicateSolvedValue</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>hasSameSolvedValue</methodName>
        <desc>(Lsrc/sudoku/Box;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>dimension</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>column</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Lsrc/sudoku/Puzzle;Lsrc/sudoku/Box;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Lsrc/sudoku/Puzzle;Lsrc/sudoku/Box;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>min</methodName>
        <desc>(Ljava/util/List;)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>copyPossibleValues</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>copyPossibleValues</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>solve</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>solve</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getSolvedValue</methodName>
        <desc>(II)I</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getSolvedValue</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Lsrc/sudoku/Puzzle;Lsrc/sudoku/Box;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>initializePuzzle</methodName>
        <desc>()[[Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUnsolvedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(III)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(III)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPossibleValues</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getSolvedValue</methodName>
        <desc>(II)I</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>row</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>addUnique</methodName>
        <desc>(Ljava/util/ArrayList;Ljava/util/List;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>dimension</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(IIII)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>copyPossibleValues</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>column</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>equals</methodName>
        <desc>(Ljava/lang/Object;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>equals</methodName>
        <desc>(Ljava/lang/Object;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>parseSolvedBoxesFromInputString</methodName>
        <desc>(Ljava/lang/String;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>solutionAsSingleString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getSolvedValue</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Lsrc/sudoku/Puzzle;Lsrc/sudoku/Box;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>column</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>column</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>dimension</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>hasSameSolvedValue</methodName>
        <desc>(Lsrc/sudoku/Box;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPossibleValues</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>propagateConstraints</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getUnsolvedPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>checkForDuplicates</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>src.sudoku.DuplicateBoxesWithSameSolutionException</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>propagateConstraints</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>setSolvedBoxesInPuzzle</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPossibleValues</methodName>
        <desc>(II)[Ljava/lang/Integer;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPossibleValues</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>hasSameSolvedValue</methodName>
        <desc>(Lsrc/sudoku/Box;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>hasSameSolvedValue</methodName>
        <desc>(Lsrc/sudoku/Box;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>row</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>copyPossibleValues</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>copyPossibleValues</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUnsolvedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>doesPossibleValueAppearInAnyPeers</methodName>
        <desc>(Ljava/lang/Integer;Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUnsolvedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>anyPeerHasDuplicateSolvedValue</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>anyPeerHasDuplicateSolvedValue</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>propagateConstraints</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersPerUnit</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersPerUnit</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>checkForDuplicates</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getUnsolvedPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getUnsolvedPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>initializePuzzle</methodName>
        <desc>()[[Lsrc/sudoku/Box;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(III)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>propagateConstraints</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>copyPossibleValues</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>doesPossibleValueAppearInAnyPeers</methodName>
        <desc>(Ljava/lang/Integer;Ljava/util/List;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPossibleValues</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>solve</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>solve</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>dimension</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>setSolvedBoxesInPuzzle</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>row</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>numberOfPossibleValues</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>numberOfPossibleValues</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>isEmpty</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>isEmpty</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>checkForDuplicates</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>checkForDuplicates</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(IIII)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>setRowAndColumn</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(III)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>setRowAndColumn</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>initializePuzzle</methodName>
        <desc>()[[Lsrc/sudoku/Box;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>initializePuzzle</methodName>
        <desc>()[[Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>row</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>row</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>parseSolvedBoxesFromInputString</methodName>
        <desc>(Ljava/lang/String;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>setValue</methodName>
        <desc>(I)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>checkForDuplicates</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>anyPeerHasDuplicateSolvedValue</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeers</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameSubSquare</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>parseSolvedBoxesFromInputString</methodName>
        <desc>(Ljava/lang/String;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(III)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>removePossibleValue</methodName>
        <desc>(I)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>removePossibleValue</methodName>
        <desc>(I)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>length</methodName>
        <desc>(Ljava/lang/String;)I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>isSolved</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>removeSolvedValuesFromPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>removePossibleValue</methodName>
        <desc>(I)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>validateInputString</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>dimension</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>dimension</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>solve</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>propagateConstraints</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Lsrc/sudoku/Puzzle;Lsrc/sudoku/Box;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(IIII)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>checkForDuplicates</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>validateInputString</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>length</methodName>
        <desc>(Ljava/lang/String;)I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>min</methodName>
        <desc>(Ljava/util/List;)Lsrc/sudoku/Box;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>min</methodName>
        <desc>(Ljava/util/List;)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.DuplicateBoxesWithSameSolutionException</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>src.sudoku.DuplicateBoxesWithSameSolutionException</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getUniquelySpecifiedBoxes</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(IIII)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>propagateConstraints</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>checkForDuplicates</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>anyPeerHasDuplicateSolvedValue</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(IIII)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(IIII)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>hasSameSolvedValue</methodName>
        <desc>(Lsrc/sudoku/Box;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getSolvedValue</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>copyPossibleValues</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPossibleValues</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getSolvedValue</methodName>
        <desc>(II)I</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>column</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>solutionAsSingleString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>solutionAsSingleString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>validateInputString</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>validateInputString</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>setSolvedBoxesInPuzzle</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>setSolvedBoxesInPuzzle</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>setSolvedBoxesInPuzzle</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getSolvedValue</methodName>
        <desc>(II)I</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getSolvedValue</methodName>
        <desc>(II)I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>length</methodName>
        <desc>(Ljava/lang/String;)I</desc>
      </start>
      <end>
        <className>src.sudoku.SudokuUtils</className>
        <methodName>length</methodName>
        <desc>(Ljava/lang/String;)I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>hashCode</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>hashCode</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>solve</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>solve</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameRow</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>search</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>column</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeers</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPeers</methodName>
        <desc>(II)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>parseSolvedBoxesFromInputString</methodName>
        <desc>(Ljava/lang/String;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>parseSolvedBoxesFromInputString</methodName>
        <desc>(Ljava/lang/String;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>initializePuzzle</methodName>
        <desc>()[[Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>propagateConstraints</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>propagateConstraints</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeersPerUnit</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersPerUnit</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>doesPossibleValueAppearInAnyPeers</methodName>
        <desc>(Ljava/lang/Integer;Ljava/util/List;)Z</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>doesPossibleValueAppearInAnyPeers</methodName>
        <desc>(Ljava/lang/Integer;Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Lsrc/sudoku/Puzzle;Lsrc/sudoku/Box;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>copyPossibleValues</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>getPossibleValues</methodName>
        <desc>(II)[Ljava/lang/Integer;</desc>
      </start>
      <end>
        <className>src.sudoku.Puzzle</className>
        <methodName>getBox</methodName>
        <desc>(II)Lsrc/sudoku/Box;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Box</className>
        <methodName>getPeers</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>getPeersInSameColumn</methodName>
        <desc>(Lsrc/sudoku/Puzzle;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>min</methodName>
        <desc>(Ljava/util/List;)Lsrc/sudoku/Box;</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>numberOfPossibleValues</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>src.sudoku.Puzzle</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Lsrc/sudoku/Puzzle;Lsrc/sudoku/Box;)V</desc>
      </start>
      <end>
        <className>src.sudoku.Box</className>
        <methodName>row</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
  </connections>
</de.unisb.cs.st.javalanche.coverage.distance.ConnectionData>