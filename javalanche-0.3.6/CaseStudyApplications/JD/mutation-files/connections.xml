<de.unisb.cs.st.javalanche.coverage.distance.ConnectionData>
  <connections>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>abstractness</methodName>
        <desc>()F</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getPackageName</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>descriptorToTypes</methodName>
        <desc>(Ljava/lang/String;)[Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;I)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;I)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>setFilter</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>setFilter</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/FileManager;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/FileManager;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptJarFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>isZip</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>setAfferents</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>setAfferents</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testEmptyFileManager</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>assertFiltersExist</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFields</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFields</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFields</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>descriptorToTypes</methodName>
        <desc>(Ljava/lang/String;)[Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>collectFiles</methodName>
        <desc>(Ljava/io/File;Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>setFilter</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getFilteredPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollectionSubset</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>getFilters</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectAllCycles</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>getDescriptorIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>dependencyMatch</methodName>
        <desc>(Ljdepend/framework/DependencyConstraint;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>match</methodName>
        <desc>(Ljava/util/Collection;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>abstractness</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>access$100</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;Ljava/lang/String;)[Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>loadProperties</methodName>
        <desc>(Ljava/io/File;)Ljava/util/Properties;</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>loadProperties</methodName>
        <desc>(Ljava/io/File;)Ljava/util/Properties;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseConstantPool</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$Constant;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseConstantPool</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$Constant;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeInnerClasses</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder$1</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/JavaClassBuilder;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder$1</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/JavaClassBuilder;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BII)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BII)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addEfferent</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>getFilter</methodName>
        <desc>()Ljdepend/framework/PackageFilter;</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>setFilter</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/util/jar/JarFile;)Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFileName</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getPackageSubDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getTypeIndex</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getTypeIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectAllCycles</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>match</methodName>
        <desc>(Ljava/util/Collection;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>match</methodName>
        <desc>(Ljava/util/Collection;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAbstractClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptJarFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptJarFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testAnalyzeClassFiles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>containsCycles</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>containsCycles</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseInterfaces</methodName>
        <desc>()[Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttributes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttribute</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$AttributeInfo;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getPackageSubDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>access$000</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchFail</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFileName</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>containsCycles</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/AbstractParser;Ljdepend/framework/FileManager;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/AbstractParser;Ljdepend/framework/FileManager;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getConstantPoolEntry</methodName>
        <desc>(I)Ljdepend/framework/ClassFileParser$Constant;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getConstantPoolEntry</methodName>
        <desc>(I)Ljdepend/framework/ClassFileParser$Constant;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFieldOrMethodInfo</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttribute</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$AttributeInfo;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getImportedPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsAfferents</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsAfferents</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>printCycles</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>printCycles</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>format</methodName>
        <desc>(F)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFieldOrMethodInfo</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFieldOrMethodInfo</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMajorVersion</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMajorVersion</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFieldOrMethodInfo</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;III)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testEmptyFileManager</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testEmptyFileManager</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>getTestDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>getTestDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>build</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>build</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getConstantPoolEntry</methodName>
        <desc>(I)Ljdepend/framework/ClassFileParser$Constant;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testBuildDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>afferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>getTestDataDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/AbstractParser;Ljdepend/framework/FileManager;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>reset</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getClassConstantName</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getNameIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>instability</methodName>
        <desc>()F</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>efferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMethods</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getPackageName</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/io/File;)Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptJarFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>fail</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseNextConstant</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$Constant;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BI)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addEfferent</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addEfferent</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>abstractness</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsAfferents</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>equals</methodName>
        <desc>(Ljava/lang/Object;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>printCycles</methodName>
        <desc>(Ljava/util/List;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseSuperClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseSuperClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getSourceFile</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>addImportedPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getPackageName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>abstractness</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMethods</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>debug</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>abstractness</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>dependencyMatch</methodName>
        <desc>(Ljdepend/framework/DependencyConstraint;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getPackageName</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getPackageName</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAbstractClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMethods</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>descriptorToTypes</methodName>
        <desc>(Ljava/lang/String;)[Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertNotNull</methodName>
        <desc>(Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BLjava/lang/Object;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BII)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseConstantPool</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$Constant;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseNextConstant</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$Constant;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getSourceFile</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>hashCode</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>getFilter</methodName>
        <desc>()Ljdepend/framework/PackageFilter;</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>getFilter</methodName>
        <desc>()Ljdepend/framework/PackageFilter;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackages</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackages</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>matchPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptJarFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getEfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>setName</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>setName</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>afferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>access$100</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;Ljava/lang/String;)[Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>descriptorToTypes</methodName>
        <desc>(Ljava/lang/String;)[Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getImportedPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollection</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertNotNull</methodName>
        <desc>(Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsDependencies</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsDependencies</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getConcreteClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>(Z)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getTag</methodName>
        <desc>()B</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AllTests</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.AllTests</className>
        <methodName>suite</methodName>
        <desc>()Ljunit/framework/TestSuite;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>setComponents</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>setValue</methodName>
        <desc>([B)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>setValue</methodName>
        <desc>([B)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>dependencyMatch</methodName>
        <desc>(Ljdepend/framework/DependencyConstraint;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>dependencyMatch</methodName>
        <desc>(Ljdepend/framework/DependencyConstraint;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectCycle</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>extractFiles</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>extractFiles</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getVolatility</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getVolatility</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchPass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>format</methodName>
        <desc>(F)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getFilteredPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getFilteredPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchPass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testWar</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testWar</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAccessFlags</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getImportedPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>getFilters</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>getFilters</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectCycle</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectCycle</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getConstantPoolEntry</methodName>
        <desc>(I)Ljdepend/framework/ClassFileParser$Constant;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>accept</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>accept</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>fail</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getFilter</methodName>
        <desc>()Ljdepend/framework/PackageFilter;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;DDD)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchPass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchPass</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>reset</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>reset</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>afferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>assertFiltersExist</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>assertFiltersExist</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>setPackageName</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>setPackageName</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getConcreteClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>getFilters</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>setName</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getTypeIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttribute</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$AttributeInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>setValue</methodName>
        <desc>([B)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>toComponent</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsDependencies</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsEfferents</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>instability</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesHaveNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>setPackageName</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>countClasses</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>build</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>build</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>getHomeDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>getHomeDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsEfferents</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>equals</methodName>
        <desc>(Ljava/lang/Object;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testZip</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getTestDataDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>abstractness</methodName>
        <desc>()F</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>abstractness</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>getValue</methodName>
        <desc>()[B</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>getValue</methodName>
        <desc>()[B</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testJar</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getTestDataDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getPackageName</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>slashesToDots</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testClassFile</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>debug</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectCycle</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollectionSubset</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollectionSubset</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>format</methodName>
        <desc>(F)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseNextConstant</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$Constant;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BLjava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeInnerClasses</methodName>
        <desc>(Z)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptInnerClasses</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollectionSubset</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectAllCycles</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchPass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getSourceFile</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getSourceFile</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>onParsedJavaClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getSourceFile</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>&lt;clinit&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>&lt;clinit&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageHasNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertFalse</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>equals</methodName>
        <desc>(Ljava/lang/Object;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackages</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getClassConstantName</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getConstantPoolEntry</methodName>
        <desc>(I)Ljdepend/framework/ClassFileParser$Constant;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttribute</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$AttributeInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttribute</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$AttributeInfo;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addParseListener</methodName>
        <desc>(Ljdepend/framework/ParserListener;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addParseListener</methodName>
        <desc>(Ljdepend/framework/ParserListener;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getFilter</methodName>
        <desc>()Ljdepend/framework/PackageFilter;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>extractFiles</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>collectFiles</methodName>
        <desc>(Ljava/io/File;Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getAnalyzeInnerClasses</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getAnalyzeInnerClasses</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMethods</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMethods</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>isWar</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>isWar</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>getFilter</methodName>
        <desc>()Ljdepend/framework/PackageFilter;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getFilter</methodName>
        <desc>()Ljdepend/framework/PackageFilter;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addClassConstantReferences</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getNameIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getTestDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectCycle</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getImportedPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getImportedPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollection</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>assertFiltersExist</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testAnalyzeClassFiles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>isWar</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>existsWithExtension</methodName>
        <desc>(Ljava/io/File;Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsEfferents</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getEfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addClassConstantReferences</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>toComponent</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>toComponent</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseNextConstant</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$Constant;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BII)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackages</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>format</methodName>
        <desc>(F)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>format</methodName>
        <desc>(F)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getPackageSubDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getValue</methodName>
        <desc>()Ljava/lang/Object;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>hashCode</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>hashCode</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getVolatility</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getValue</methodName>
        <desc>()Ljava/lang/Object;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getValue</methodName>
        <desc>()Ljava/lang/Object;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>matchPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsDependencies</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>setFilter</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>setFilter</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsAfferents</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getImportedPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMinorVersion</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchPass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>dependencyMatch</methodName>
        <desc>(Ljdepend/framework/DependencyConstraint;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getPackageSubDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getClassConstantName</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getClassConstantName</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFields</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>getDescriptorIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseInterfaces</methodName>
        <desc>()[Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>addImportedPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getPackageName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getPackageName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>getNameIndex</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>getNameIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseNextConstant</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$Constant;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseNextConstant</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$Constant;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>collectFiles</methodName>
        <desc>(Ljava/io/File;Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>addFile</methodName>
        <desc>(Ljava/io/File;Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>countPackages</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>countPackages</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>format</methodName>
        <desc>(F)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getVolatility</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/io/File;)Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>isZip</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>isZip</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectCycle</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchFail</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchFail</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>instability</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>addImportedPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getEfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AllTests</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.AllTests</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>access$100</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;Ljava/lang/String;)[Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>access$100</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;Ljava/lang/String;)[Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>fail</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseSuperClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>debug</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMethods</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>getDescriptorIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttributes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttributes</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttributes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>getValue</methodName>
        <desc>()[B</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getConfiguredPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getConfiguredPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>getTestDataDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>getTestDataDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testJar</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>setSourceFile</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>setSourceFile</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttributes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addClassConstantReferences</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getPackageName</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getClassConstantName</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertFalse</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addClassConstantReferences</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseSuperClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>getNameIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getClassConstantName</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;I)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>setVolatility</methodName>
        <desc>(I)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getPackageName</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMinorVersion</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMinorVersion</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/util/jar/JarFile;)Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/util/jar/JarFile;)Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getClasses</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getClasses</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptJarFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>isJar</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testZip</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testZip</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/util/jar/JarFile;)Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectAllCycles</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getEfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addAfferent</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BI)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BII)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseConstantPool</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$Constant;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getTag</methodName>
        <desc>()B</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getPackageSubDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsEfferents</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsEfferents</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertNotNull</methodName>
        <desc>(Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>hashCode</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>hashCode</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addClassConstantReferences</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>accessFlags</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>accessFlags</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesHaveNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>containsCycles</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>fail</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>equals</methodName>
        <desc>(Ljava/lang/Object;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>equals</methodName>
        <desc>(Ljava/lang/Object;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getConfiguredPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getHomeDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>setFilter</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>setFilter</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/io/File;)Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttributes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>setSourceFile</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollection</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>getFilters</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttributes</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>instability</methodName>
        <desc>()F</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>instability</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesDistance</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BLjava/lang/Object;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BLjava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttribute</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$AttributeInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageDistance</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addClassConstantReferences</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>debug</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getPackageSubDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptJarFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAbstractClassCount</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackages</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackages</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseInterfaces</methodName>
        <desc>()[Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getClassConstantName</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>setName</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>setName</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getSourceFile</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>efferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getVolatility</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>setVolatility</methodName>
        <desc>(I)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addClassConstantReferences</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getTag</methodName>
        <desc>()B</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>build</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/io/File;)Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getPackageSubDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>efferentCoupling</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>efferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesHaveNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesHaveNoCycles</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFields</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getPackageName</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseSuperClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getClassConstantName</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeInnerClasses</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>countClasses</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectAllCycles</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectAllCycles</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/io/File;)Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/io/File;)Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchFail</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>format</methodName>
        <desc>(F)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>format</methodName>
        <desc>(F)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackages</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getEfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getEfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>debug</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackages</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testWar</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getTestDataDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>setComponents</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>setComponents</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>debug</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>debug</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertNotNull</methodName>
        <desc>(Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>isJar</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>isJar</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getDefaultPropertyFile</methodName>
        <desc>()Ljava/io/File;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>equals</methodName>
        <desc>(Ljava/lang/Object;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getEfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>addParseListener</methodName>
        <desc>(Ljdepend/framework/ParserListener;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>addParseListener</methodName>
        <desc>(Ljdepend/framework/ParserListener;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getImportedPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addClassConstantReferences</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addClassConstantReferences</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;DDD)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttributes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>setFilter</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getEfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptJarFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>isWar</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFields</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFieldOrMethodInfo</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder$1</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder$1</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttribute</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$AttributeInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>setName</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectAllCycles</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAbstractClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getNameIndex</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getNameIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>accept</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>getFilters</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>instability</methodName>
        <desc>()F</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>afferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testBuildDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testBuildDirectory</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getClassCount</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchFail</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>dependencyMatch</methodName>
        <desc>(Ljdepend/framework/DependencyConstraint;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/FileManager;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/AbstractParser;Ljdepend/framework/FileManager;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>getFilter</methodName>
        <desc>()Ljdepend/framework/PackageFilter;</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMethods</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAbstractClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMajorVersion</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>afferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>countPackages</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getPackageName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>getFilter</methodName>
        <desc>()Ljdepend/framework/PackageFilter;</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchFail</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>build</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>extractFiles</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>setVolatility</methodName>
        <desc>(I)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>setVolatility</methodName>
        <desc>(I)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getFilter</methodName>
        <desc>()Ljdepend/framework/PackageFilter;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>afferentCoupling</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>afferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>countClasses</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>countClasses</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageHasNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>assertFiltersExist</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>accept</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAccessFlags</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>debug</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>format</methodName>
        <desc>(F)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectCycle</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testZip</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AllTests</className>
        <methodName>suite</methodName>
        <desc>()Ljunit/framework/TestSuite;</desc>
      </start>
      <end>
        <className>jdepend.framework.AllTests</className>
        <methodName>suite</methodName>
        <desc>()Ljunit/framework/TestSuite;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>instability</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectCycle</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testWar</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>setEfferents</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>setEfferents</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getTag</methodName>
        <desc>()B</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testBuildDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>addDirectory</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>reset</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>fail</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMethods</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFieldOrMethodInfo</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addAfferent</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addAfferent</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>loadProperties</methodName>
        <desc>(Ljava/io/File;)Ljava/util/Properties;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addParseListener</methodName>
        <desc>(Ljdepend/framework/ParserListener;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addParseListener</methodName>
        <desc>(Ljdepend/framework/ParserListener;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollection</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollection</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMethods</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>abstractness</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>getPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>getPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testAnalyzeClassFiles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testAnalyzeClassFiles</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptInnerClasses</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BI)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;BI)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>addFile</methodName>
        <desc>(Ljava/io/File;Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>addFile</methodName>
        <desc>(Ljava/io/File;Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getAnalyzeInnerClasses</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>onParsedJavaClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ParserListener</className>
        <methodName>onParsedJavaClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>countClasses</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>countClasses</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>access$000</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageHasNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testBuildDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMagic</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMagic</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getConcreteClassCount</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getConcreteClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getSourceFile</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeInnerClasses</methodName>
        <desc>(Z)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeInnerClasses</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>containsCycles</methodName>
        <desc>()Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchSubCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>slashesToDots</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>slashesToDots</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addAfferent</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>format</methodName>
        <desc>(F)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;I)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testBuildDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>extractFiles</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/FileManager;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageHasNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptInnerClasses</methodName>
        <desc>(Z)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptInnerClasses</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidDirectory</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getImportedPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>abstractness</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchFail</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseInterfaces</methodName>
        <desc>()[Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>debug</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>matchPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>matchPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>addImportedPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>addImportedPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Properties;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getNameIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>getTestDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectAllCycles</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getVolatility</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseInterfaces</methodName>
        <desc>()[Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getPackageName</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testJar</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testJar</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageHasNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageHasNoCycles</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFields</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>debug</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAccessFlags</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getClassConstantName</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>slashesToDots</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder$1</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>countClasses</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>countClasses</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getConcreteClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMethods</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeInnerClasses</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchFail</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>onParsedJavaClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>onParsedJavaClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>efferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAbstractClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getTag</methodName>
        <desc>()B</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getDefaultPropertyFile</methodName>
        <desc>()Ljava/io/File;</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getDefaultPropertyFile</methodName>
        <desc>()Ljava/io/File;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>instability</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;clinit&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;clinit&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.AllTests</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.AllTests</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder$1</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/JavaClassBuilder;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.AbstractParser</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>accept</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertAnalyzePackages</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectCycle</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getEfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAbstractClassCount</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAbstractClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getConcreteClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAccessFlags</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAccessFlags</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>efferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>assertFiltersExist</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FilterTest</className>
        <methodName>assertFalse</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getValue</methodName>
        <desc>()Ljava/lang/Object;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInvalidClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/File;)Ljdepend/framework/JavaClass;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackages</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseConstantPool</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$Constant;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>afferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchFail</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test2Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getConcreteClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollection</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchPass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertSwingUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>distance</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getConcreteClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>access$000</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;I)Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>access$000</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectAllCycles</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Properties;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Properties;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getConcreteClassCount</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>isAbstract</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageDistance</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getVolatility</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFields</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>toUTF8</methodName>
        <desc>(I)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testAbstractClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>getPackageSubDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getImportedPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testAllPackagesHaveNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertFalse</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>existsWithExtension</methodName>
        <desc>(Ljava/io/File;Ljava/lang/String;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>existsWithExtension</methodName>
        <desc>(Ljava/io/File;Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsDependencies</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>equalsAfferents</methodName>
        <desc>(Ljdepend/framework/JavaPackage;Ljdepend/framework/JavaPackage;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseMagic</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertEquals</methodName>
        <desc>(ZZ)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getTag</methodName>
        <desc>()B</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$Constant</className>
        <methodName>getTag</methodName>
        <desc>()B</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>testNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>assertListEquals</methodName>
        <desc>(Ljava/util/List;[Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseInterfaces</methodName>
        <desc>()[Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseInterfaces</methodName>
        <desc>()[Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test3Node1BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>collectCycle</methodName>
        <desc>(Ljava/util/List;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>&lt;clinit&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>&lt;clinit&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInnerClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CycleTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>getPackageSubDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>getPackageSubDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFields</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addImport</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseSuperClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>getPackageName</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>match</methodName>
        <desc>(Ljava/util/Collection;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>matchPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>isJar</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>existsWithExtension</methodName>
        <desc>(Ljava/io/File;Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>countClasses</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder$1</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/JavaClassBuilder;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchPass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>addPackage</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>dependsUpon</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>addEfferent</methodName>
        <desc>(Ljdepend/framework/JavaPackage;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>testJDependComponents</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testConcreteClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>testCollectionSubset</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>equals</methodName>
        <desc>(Ljava/lang/Object;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>equals</methodName>
        <desc>(Ljava/lang/Object;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/io/File;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>hashCode</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>efferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getVolatility</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>efferentCoupling</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FilterTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test3Node2BranchCycle</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>setUp</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;III)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;III)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseSuperClassName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyze</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testInvalidDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.CollectAllCyclesTest</className>
        <methodName>test5Node2BranchCycle</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentClassFile</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentClassFile</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseAttribute</methodName>
        <desc>()Ljdepend/framework/ClassFileParser$AttributeInfo;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$AttributeInfo</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/ClassFileParser;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testAnalyzeClassFiles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>getBuildDir</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFileName</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptClassFileName</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/PackageFilter;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJDependPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ExampleTest</className>
        <methodName>testOnePackageHasNoCycles</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>containsCycle</methodName>
        <desc>()Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>countClasses</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/AbstractParser;Ljdepend/framework/FileManager;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDepend</className>
        <methodName>getPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertTextUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>instability</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>descriptorToTypes</methodName>
        <desc>(Ljava/lang/String;)[Ljava/lang/String;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>descriptorToTypes</methodName>
        <desc>(Ljava/lang/String;)[Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertFrameworkPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>instability</methodName>
        <desc>()F</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>acceptFile</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getFilteredPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/io/File;)Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>buildClasses</methodName>
        <desc>(Ljava/util/jar/JarFile;)Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClassBuilder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljdepend/framework/AbstractParser;Ljdepend/framework/FileManager;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>isZip</methodName>
        <desc>(Ljava/io/File;)Z</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>existsWithExtension</methodName>
        <desc>(Ljava/io/File;Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JDepend</className>
        <methodName>analyzeClass</methodName>
        <desc>(Ljdepend/framework/JavaClass;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>accept</methodName>
        <desc>(Ljava/lang/String;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ConstraintTest</className>
        <methodName>testMatchPass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManager</className>
        <methodName>collectFiles</methodName>
        <desc>(Ljava/io/File;Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>collectFiles</methodName>
        <desc>(Ljava/io/File;Ljava/util/Collection;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.DependencyConstraint</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)Ljdepend/framework/JavaPackage;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>testConfiguredVolatility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJavaxPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAfferents</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentDirectory</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testNonExistentDirectory</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parse</methodName>
        <desc>(Ljava/io/InputStream;)Ljdepend/framework/JavaClass;</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>parseFields</methodName>
        <desc>()[Ljdepend/framework/ClassFileParser$FieldOrMethodInfo;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>getDescriptorIndex</methodName>
        <desc>()I</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser$FieldOrMethodInfo</className>
        <methodName>getDescriptorIndex</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PropertyConfigurator</className>
        <methodName>getConfiguredPackages</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;I)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertXmlUIPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.MetricTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.FileManagerTest</className>
        <methodName>testEmptyFileManager</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.FileManager</className>
        <methodName>extractFiles</methodName>
        <desc>()Ljava/util/Collection;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.MetricTest</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JDependTestCase</className>
        <methodName>tearDown</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>addClassConstantReferences</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParser</className>
        <methodName>slashesToDots</methodName>
        <desc>(Ljava/lang/String;)Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>abstractness</methodName>
        <desc>()F</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaPackage</className>
        <methodName>getAbstractClassCount</methodName>
        <desc>()I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackages</methodName>
        <desc>(Ljava/util/Collection;)V</desc>
      </start>
      <end>
        <className>jdepend.framework.PackageFilter</className>
        <methodName>addPackage</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testInterfaceClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.JavaClass</className>
        <methodName>getName</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>testPackageClass</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ClassFileParserTest</className>
        <methodName>assertTrue</methodName>
        <desc>(Z)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>jdepend.framework.ComponentTest</className>
        <methodName>assertJUnitPackage</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
  </connections>
</de.unisb.cs.st.javalanche.coverage.distance.ConnectionData>