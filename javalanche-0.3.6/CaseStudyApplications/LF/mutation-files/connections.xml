<de.unisb.cs.st.javalanche.coverage.distance.ConnectionData>
  <connections>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.TestNode</className>
        <methodName>compareTo</methodName>
        <desc>(Ljava/lang/Object;)I</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>compareTo</methodName>
        <desc>(Ljava/lang/Object;)I</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_2TightLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;Lfinder/Node;Ljava/util/Set;Z)Ljava/util/List;</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;Lfinder/Node;Ljava/util/Set;Z)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnOtherFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnOtherFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/Object;Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_LargerLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_LargerLoop</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopUpstream</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_NoLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;Lfinder/Node;Ljava/util/Set;Z)Ljava/util/List;</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>alreadyVisitedHere</methodName>
        <desc>(Ljava/util/Set;Lfinder/Node;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Trivial_NoLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_LargerLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/Object;Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop_WithExcludedNodes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop_WithExcludedNodes</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_LargerLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;Lfinder/Node;Ljava/util/Set;Z)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnOtherFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnOtherFacility</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.TestNode</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>toString</methodName>
        <desc>()Ljava/lang/String;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testTwoParallelStreams_WithOneComplicatedNonLoop_AndOneLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnProcessedFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testTwoParallelStreams_WithOneComplicatedNonLoop_AndOneLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>testTwoParallelStreams_WithOneComplicatedNonLoop_AndOneLoop</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Pyramid_NoLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopDownstream</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop_WithExcludedNodes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Trivial_NoLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_2TightLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnProcessedFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_NoLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop_WithExcludedNodes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_2TightLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_2TightLoops</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;Lfinder/Node;Ljava/util/Set;Z)Ljava/util/List;</desc>
      </start>
      <end>
        <className>finder.Node</className>
        <methodName>getOutgoing</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinder</className>
        <methodName>alreadyVisitedHere</methodName>
        <desc>(Ljava/util/Set;Lfinder/Node;)Z</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>alreadyVisitedHere</methodName>
        <desc>(Ljava/util/Set;Lfinder/Node;)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Pyramid_NoLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Pyramid_NoLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnProcessedFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_LargerLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>suite</methodName>
        <desc>()Ljunit/framework/TestSuite;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopDownstream</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopUpstream</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_NoLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopUpstream</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnProcessedFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_2TightLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/Object;Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Trivial_NoLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Trivial_NoLoop</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_LargerLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;Lfinder/Node;Ljava/util/Set;Z)Ljava/util/List;</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>returnedToStartingNode</methodName>
        <desc>(Lfinder/Node;Lfinder/Node;Z)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/Object;Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Trivial_NoLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnProcessedFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/Object;Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>suite</methodName>
        <desc>()Ljunit/framework/TestSuite;</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>suite</methodName>
        <desc>()Ljunit/framework/TestSuite;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_2TightLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinder</className>
        <methodName>returnedToStartingNode</methodName>
        <desc>(Lfinder/Node;Lfinder/Node;Z)Z</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>returnedToStartingNode</methodName>
        <desc>(Lfinder/Node;Lfinder/Node;Z)Z</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop_WithExcludedNodes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/Object;Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnOtherFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopUpstream</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop_WithExcludedNodes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.TestNode</className>
        <methodName>getOutgoing</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>getOutgoing</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Pyramid_NoLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>main</methodName>
        <desc>([Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnOtherFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopDownstream</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopDownstream</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testTwoParallelStreams_WithOneComplicatedNonLoop_AndOneLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/String;II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopDownstream</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopUpstream</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopUpstream</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnProcessedFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnProcessedFacility</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop_WithTail_OnOtherFacility</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_NoLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_NoLoop</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop_WithExcludedNodes</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_NoLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testTwoParallelStreams_WithOneComplicatedNonLoop_AndOneLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/Object;Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_Loop_MainLoopContainsNestedLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>test_NoLoop_ConnectedToALoopDownstream</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testTwoParallelStreams_WithOneComplicatedNonLoop_AndOneLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testTwoParallelStreams_WithOneComplicatedNonLoop_AndOneLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>&lt;init&gt;</methodName>
        <desc>(Ljava/lang/String;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Pyramid_NoLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_Pyramid_NoLoops</methodName>
        <desc>()V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.TestNode</className>
        <methodName>sendTo</methodName>
        <desc>(Lfinder/TestNode;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_2TightLoops</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(Ljava/lang/Object;Ljava/lang/Object;)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.Node</className>
        <methodName>getOutgoing</methodName>
        <desc>()Ljava/util/List;</desc>
      </start>
      <end>
        <className>finder.Node</className>
        <methodName>getOutgoing</methodName>
        <desc>()Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_TightLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinderTest</className>
        <methodName>assertEquals</methodName>
        <desc>(II)V</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
    <de.unisb.cs.st.javalanche.coverage.distance.Tuple>
      <start>
        <className>finder.LoopFinderTest</className>
        <methodName>testSimpleLoop_LargerLoop</methodName>
        <desc>()V</desc>
      </start>
      <end>
        <className>finder.LoopFinder</className>
        <methodName>findSimpleLoop</methodName>
        <desc>(Lfinder/Node;)Ljava/util/List;</desc>
      </end>
    </de.unisb.cs.st.javalanche.coverage.distance.Tuple>
  </connections>
</de.unisb.cs.st.javalanche.coverage.distance.ConnectionData>