<project  name="javalanche-include" default="">
<!--name=" Javalanche Mutation Include - File to include from a projects ant build file to enable mutation testing"-->	
	
	<property name="mutation.base.dir" value="${javalanche.location}" />
	<property name="javalanche.mutation.javaagent" value="${javalanche.dist.dir}/javaagent.jar" />
	<property name="mutation.jars.dir" value="${javalanche.dist.dir}/lib/" />
	<property name="javalanche.mutation.output.dir" value="${basedir}/mutation-files" />
		
		
	<condition property="javalanche.maxmemory" value="2048m">
	  	<not>
			<isset property="javalanche.maxmemory"/>
	  	</not>
	</condition>
	
	
	  
	<path id="mutation.classpath">
		<!--pathelement path="/Users/schuler/workspace/mutationTest/target/classes/" /-->
		<pathelement path="${javalanche.dist.dir}/src/main/resources"/>
		<fileset dir="${mutation.jars.dir}" includes="*.jar">
		  <include name="**/*.jar"/>
		  <exclude name="**/*daikon*"/>
		 </fileset>
	</path>
	
	<import file="./coverage-include.xml"/>
	<import file="./mutation-add-tasks.xml"/>
	
	<target name="cleanJavalanche" description="* Delete all files produced by javalanche.">
		<delete dir="${javalanche.mutation.output.dir}"/>
	</target>
	
	<target name="mutationDir">
		<mkdir dir="${javalanche.mutation.output.dir}"/>
	</target>
	
	
		<target name="testTask1" description="* Test the Javalanche task. The task should behave in the same way as a regular test task.">
		<property name="test.task.1.memory" value="-Xmx${javalanche.maxmemory}"/> 
		<property name="test.task.1.mutation.run.mode" value="-Dmutation.run.mode=off"/> 
		<property name="test.task.1.javalanche.package.prefix" value="-Dmutation.package.prefix=${project.prefix}"/>
		<property name="test.task.1.javalanche.project.test.suite" value="-Dmutation.test.suite=${project.test.suite}"/>
	
		<path id="testTask.javalanche.classpath.add">
			<path refid="mutation.classpath"/>
		</path>

		<antcall target="test-javalanche">                                
			<param name="javalanche.arg.line" value="${test.task.1.memory} ${test.task.1.mutation.run.mode} ${test.task.1.javalanche.package.prefix} ${test.task.1.javalanche.project.test.suite}" />
			<reference refid="testTask.javalanche.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>  
	
	<!--target name="testTask1" description="* Test the Javalanche task. The task should behave in the same way as a regular test task.">
		<path id="testTask.javalanche.classpath.add">
			<path refid="mutation.classpath"/>
		</path>

		<antcall target="test-javalanche">
			<param name="javalanche.arg.line" value="-Dmutation.run.mode=off -Dmutation.package.prefix=${project.prefix}" />
			<reference refid="testTask.javalanche.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target-->

	
	<target name="testTask2" description="* Test the Javalanche test runner without any bytecode modifications. All tests should pass in the Javalanche test runner.">
		<property name="test.task.2.mutation.javaagent" value="-javaagent:${javalanche.mutation.javaagent}"/>
		<property name="test.task.2.memory" value="-Xmx${javalanche.maxmemory}"/>
		<property name="test.task.2.mutation.run.mode" value="-Dmutation.run.mode=test1"/>
		<property name="test.task.2.javalanche.package.prefix" value="-Dmutation.package.prefix=${project.prefix}"/>
		<property name="test.task.2.javalanche.project.test.suite" value="-Dmutation.test.suite=${project.test.suite}"/>
		<property name="test.task.2.verbose" value="-verbose"/>
		
		<path id="test.task.2.classpath.add">
			<path refid="mutation.classpath"/>
		</path>
		
		<antcall target="test-javalanche">
			<!--${test.task.2.verbose}-->
			<param name="javalanche.arg.line" value="  ${test.task.2.mutation.javaagent} ${test.task.2.memory} ${test.task.2.mutation.run.mode} ${test.task.2.javalanche.package.prefix} ${test.task.2.javalanche.project.test.suite} " />
			<reference refid="test.task.2.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>                              
	
	
	<target name="testTask3" description="* Run the tests multiple times in different order. The outcome of the tests should not depend on the execution order.">
		<property name="test.task.3.mutation.javaagent" value="-javaagent:${javalanche.mutation.javaagent}"/>
		<property name="test.task.3.memory" value="-Xmx${javalanche.maxmemory}"/>
		<property name="test.task.3.mutation.run.mode" value="-Dmutation.run.mode=test3"/>
		<property name="test.task.3.javalanche.package.prefix" value="-Dmutation.package.prefix=${project.prefix}"/>
		<property name="test.task.3.javalanche.project.test.suite" value="-Dmutation.test.suite=${project.test.suite}"/>
		<property name="test.task.3.verbose" value="-verbose"/>
		
		<path id="test.task.3.classpath.add">
			<path refid="mutation.classpath"/>
		</path>
		
		<antcall target="test-javalanche">
			<!--${test.task.3.verbose}-->
			<param name="javalanche.arg.line" value="  ${test.task.3.mutation.javaagent} ${test.task.3.memory} ${test.task.3.mutation.run.mode} ${test.task.3.javalanche.package.prefix} ${test.task.3.javalanche.project.test.suite} " />
			<reference refid="test.task.3.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>

	<target name="scanProject" depends="_scanProject,_scanForTests" description="* Scan this project for classes to mutate and tests, that are not mutated. A different start directroy can be supplied with property -Djavalanche.test.base.dir=. ">
	<!-- To this end the subdirectories of the current directorry are searched for tests.   The format of the exclude file is described in the documentation. This task produces an exclude file : mutation-files/exclude.txt.-->
	</target>
	<target name="_scanProject">
		<property name="scan.project.mutation.javaagent" value="-javaagent:${javalanche.mutation.javaagent}"/>
		<property name="scan.project.memory" value="-Xmx${javalanche.maxmemory}"/>
		<property name="scan.project.mutation.run.mode" value="-Dmutation.run.mode=scan-project"/>
		<property name="scan.project.javalanche.package.prefix" value="-Dmutation.package.prefix=${project.prefix}"/>
		<property name="scan.project.javalanche.project.test.suite" value="-Dmutation.test.suite=${project.test.suite}"/>
		<property name="scan.project.verbose" value="-verbose"/>

		
		<path id="scan.project.classpath.add">
			<path refid="mutation.classpath"/>
		</path>
		
		<antcall target="test-javalanche">
			<!--${scan.project.verbose}-->
			<param name="javalanche.arg.line" value="  ${scan.project.mutation.javaagent} ${scan.project.memory} ${scan.project.mutation.run.mode} ${scan.project.javalanche.package.prefix} ${scan.project.javalanche.project.test.suite} " />
			<reference refid="scan.project.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>
	
	<!--
	Scan in all subdirectories for tests ajdnd updates the excludes file. A different directroy can be supplied with the property -Djavalanche.test.base.dir="
	-->
	<target name="_scanForTests" >
		<mkdir dir="${javalanche.mutation.output.dir}"/>
		<condition property="javalanche.test.base.dir" value=".">
	  	<not>
			<isset property="javalanche.test.base.dir"/>
	  	</not>
		</condition>
	  
		<java classname="de.unisb.cs.st.javalanche.mutation.testDetector.TestDetector" maxmemory="${javalanche.maxmemory}" fork="true">
			<sysproperty key="mutation.package.prefix" value="${project.prefix}" />
			<sysproperty key="javalanche.test.base.dir" value="${javalanche.test.base.dir}" />
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
		</java>
	</target>
		

	<target name="scan" description="* Scan the project for mutations.">
		
		<property name="scan.mutation.javaagent" value="-javaagent:${javalanche.mutation.javaagent}"/>
		<property name="scan.memory" value="-Xmx${javalanche.maxmemory}"/>
		<property name="scan.mutation.run.mode" value="-Dmutation.run.mode=scan"/>
		<property name="scan.javalanche.package.prefix" value="-Dmutation.package.prefix=${project.prefix}"/>
		<property name="scan.javalanche.project.test.suite" value="-Dmutation.test.suite=${project.test.suite}"/>
		<!--property name="scan.junit4" value="-Djavalanche.junit4=true"/-->
		
		<property name="scan.bootclasspath" value="-Xbootclasspath/a:${javalanche.dist.dir}/javalanche-mutation-bootclasspath.jar"/>
		<path id="scan.javalanche.classpath.add">
			<path refid="mutation.classpath"/>
		</path>
		
		<antcall target="test-javalanche">
			<param name="javalanche.arg.line" value=" ${scan.memory} ${scan.bootclasspath} ${scan.mutation.javaagent}  ${scan.mutation.run.mode} ${scan.javalanche.package.prefix} ${scan.javalanche.project.test.suite} " />
			<reference refid="scan.javalanche.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>
	</target>
	
	<target name="createTasks" description="* Create mutations task files.">
		<mkdir dir="${javalanche.mutation.output.dir}"/>
		
		<java classname="de.unisb.cs.st.javalanche.mutation.run.threaded.task.MutationTaskCreator" maxmemory="${javalanche.maxmemory}" fork="true">
			<sysproperty key="mutation.package.prefix" value="${project.prefix}" />
			<sysproperty key="mutation.number.of.tasks" value="100" />
			<sysproperty key="mutation.mutations.per.task" value="400" />
			<sysproperty key="javalanche.mutation.output.dir" value="${javalanche.mutation.output.dir}" />
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
		</java>
	</target>
	

	
	<target name="createTasksFixed" description="* Create a fixed number of tasks (specified by -Djavalanche.fixed.number.of.tasks=).">
	  <condition property="javalanche.fixed.number.of.tasks" value="8">
	  	<not>
			<isset property="javalanche.fixed.number.of.tasks"/>
	  	</not>
	  </condition>
		<mkdir dir="${javalanche.mutation.output.dir}"/>
		<java classname="de.unisb.cs.st.javalanche.mutation.run.threaded.task.MutationTaskCreator" maxmemory="${javalanche.maxmemory}" fork="true">
			<sysproperty key="mutation.package.prefix" value="${project.prefix}" />
			<sysproperty key="javalanche.fixed.number.of.tasks" value="${javalanche.fixed.number.of.tasks}" />
			<sysproperty key="javalanche.mutation.output.dir" value="${javalanche.mutation.output.dir}" />
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
		</java>
	</target>
	
	
    <target name="createTasksFew" depends="mutationDir">
		<java classname="de.unisb.cs.st.javalanche.mutation.run.threaded.task.MutationTaskCreator" maxmemory="${javalanche.maxmemory}" fork="true">
			<sysproperty key="mutation.package.prefix" value="${project.prefix}" />
			<sysproperty key="mutation.number.of.tasks" value="10" />
			<sysproperty key="mutation.mutations.per.task" value="10" />
			<sysproperty key="javalanche.mutation.output.dir" value="${javalanche.mutation.output.dir}" />
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
		</java>
	</target>
	
	
	
	
	<target name="runMutations" description="* Run the mutation task specified by -Dmutation.file=. ">
	
	
		
		<condition property="run.mutations.single.task.mode" value="-Djavalanche.single.task.mode=true" else="-Djavalanche.single.task.mode=false">
			<isset property="single.task.mode"/>
		</condition>
		

	
		<property name="run.mutations.mutation.javaagent" value="-javaagent:${javalanche.mutation.javaagent}"/>
		<property name="run.mutations.memory" value="-Xmx${javalanche.maxmemory}"/>
		<property name="run.mutations.mutation.run.mode" value="-Dmutation.run.mode=mutation"/>
		<property name="run.mutations.javalanche.package.prefix" value="-Dmutation.package.prefix=${project.prefix}"/>
		<property name="run.mutations.javalanche.project.test.suite" value="-Dmutation.test.suite=${project.test.suite}"/>
		<property name="run.mutations.mutation.file" value="-Dmutation.file=${mutation.file}"/>
		<property name="run.mutations.mutation.result.file" value="-Dmutation.result.file=result-${mutation.file}"/>
		<property name="run.mutations.verbose" value="-verbose"/>
		<property name="run.mutations.listener" value="-Djavalanche.mutation.test.listener=de.unisb.cs.st.javalanche.mutation.runtime.jmx.JmxMutationTestListener"/>
		<path id="run.mutations.classpath.add">
			<path refid="mutation.classpath"/>
		</path>
			<!--${run.mutations.verbose}-->
		<antcall target="test-javalanche">
			<param name="javalanche.arg.line" value="  ${run.mutations.mutation.javaagent} ${run.mutations.memory} ${run.mutations.mutation.run.mode} ${run.mutations.javalanche.package.prefix} ${run.mutations.javalanche.project.test.suite} ${run.mutations.mutation.file} ${run.mutations.mutation.result.file} ${run.mutations.listener} ${run.mutations.single.task.mode}" />
			<reference refid="run.mutations.classpath.add" torefid="javalanche.classpath.add"/>
		</antcall>

	</target>

	
	
	<target name="createMutationMakefile" description="* Create a Makefile for the mutation tasks.">
	<condition property="prog.arg" value="${makefile.add}" else="">
	<isset property="makefile.add"/>
	</condition>
	<java dir="${basedir}" fork="true" classname="de.unisb.cs.st.javalanche.mutation.util.MutationMakeFileGenerator">
			<classpath refid="mutation.classpath"/>
			<sysproperty key="mutation.package.prefix" value="${project.prefix}"/>
			<sysproperty key="mutation.command" value="runMutations.sh"/>
			<sysproperty key="javalanche.mutation.output.dir" value="${javalanche.mutation.output.dir}" />
			<arg line="${prog.arg}"/>
		</java>
	</target>




	<target name="analyzeResults" description="* Analyze the mutation test results. Own analyzers can be specified with -Djavalanche.mutation.analyzers=">
	<echo> Using ${javalanche.maxmemory} memory </echo>
	<!--jvmarg value="-Djavalanche.mutation.analyzers=de.unisb.cs.st.javalanche.mutation.analyze.MutationPrioritizationAnalyzer" />-->
	<!--echo> Test: ${javalanche.mutation.analyzers} </echo-->
	<condition property="analyze.add" value="-Djavalanche.mutation.analyzers=${javalanche.mutation.analyzers}" else="">
		<isset property="javalanche.mutation.analyzers"/>
	</condition>
	  
		<java classname="de.unisb.cs.st.javalanche.mutation.analyze.AnalyzeMain" maxmemory="${javalanche.maxmemory}" fork="true">
			<jvmarg value="-Dmutation.package.prefix=${project.prefix}" />
			<jvmarg line="${analyze.add}" />
			<classpath>
				<path refid="mutation.classpath" />
				<pathelement path="${cp}" />
			</classpath>
			<jvmarg line="-Dinvariant.checker.file=${invariant.checker.file}"/>
			<jvmarg line="-Dprioritization.dir=${prioritization.dir}"/>
		</java>
	</target>


	<target name="deleteResults" description="* Delete mutation results for this project.">
		<echo> Deleting mutation result with prefix: ${project.prefix} </echo>
		<java classname="de.unisb.cs.st.javalanche.mutation.analyze.tools.ResultDeleter" maxmemory="${javalanche.maxmemory}" fork="true">
			<sysproperty key="mutation.package.prefix" value="${project.prefix}" />
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
		</java>
	</target>
	
	
	<target name="deleteSingleResult" description="* Delete result for single specified mutation (property -Dmutation.id=).">
		<echo> Deleting result for mutation with id: ${mutation.id} </echo>
		<java classname="de.unisb.cs.st.javalanche.mutation.analyze.tools.ResultDeleter" maxmemory="${javalanche.maxmemory}" fork="true">
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
			<arg value="${mutation.id}"/>
		</java>
	</target>
	
		
	<target name="showMutation" description="* Show the mutation with given id (-Dmutation.id= ) and its results. ">
		<echo> Display mutation with id: ${mutation.id} </echo>
		<java classname="de.unisb.cs.st.javalanche.mutation.analyze.tools.ShowMutation" maxmemory="${javalanche.maxmemory}" fork="true">
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
			<arg value="${mutation.id}"/>
		</java>
	</target>
	
	
	
	<target name="deleteMutations" description="* Delete mutations for this project.">
		<echo> Deleting mutations with prefix: ${project.prefix} </echo>
		<delete dir="mutation-files/coverage-data" />
		<java classname="de.unisb.cs.st.javalanche.mutation.analyze.tools.MutationDeleter" maxmemory="${javalanche.maxmemory}" fork="true">
			<sysproperty key="mutation.package.prefix" value="${project.prefix}" />
			<classpath>
				<path refid="mutation.classpath" />
			</classpath>
		</java>
	</target>
	
	<target name="runMake">
		<exec executable="make" spawn="false">
			<arg value="-j5"/>
		</exec>
	</target>
		
</project>
